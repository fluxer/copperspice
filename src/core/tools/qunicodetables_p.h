/***********************************************************************
*
* Copyright (c) 2012-2018 Barbara Geller
* Copyright (c) 2012-2018 Ansel Sermersheim
* Copyright (c) 2012-2016 Digia Plc and/or its subsidiary(-ies).
* Copyright (c) 2008-2012 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
*
* This file is part of CopperSpice.
*
* CopperSpice is free software. You can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public License
* version 2.1 as published by the Free Software Foundation.
*
* CopperSpice is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* <http://www.gnu.org/licenses/>.
*
***********************************************************************/

/* This file is autogenerated from the Unicode 8.0 database. Do not edit */

#ifndef QUNICODETABLES_P_H
#define QUNICODETABLES_P_H

#include <qchar.h>

#define UNICODE_DATA_VERSION    QChar::Unicode_8_0
#define UNICODE_DATA_VERSION_32 QChar32::Unicode_8_0

namespace QUnicodeTables {

struct NormalizationCorrection {
   uint ucs4;
   uint old_mapping;
   int  version;
};

extern const NormalizationCorrection uc_normalization_corrections[];

static constexpr const int NumNormalizationCorrections        = 6;
static constexpr const int NormalizationCorrectionsVersionMax = 7;

struct Properties {
    ushort category            : 8; /* 5 used */
    ushort direction           : 8; /* 5 used */
    ushort combiningClass      : 8;
    ushort joining             : 3;
    signed short digitValue    : 5;
    signed short mirrorDiff    : 16;
    ushort lowerCaseSpecial    : 1;
    signed short lowerCaseDiff : 15;
    ushort upperCaseSpecial    : 1;
    signed short upperCaseDiff : 15;
    ushort titleCaseSpecial    : 1;
    signed short titleCaseDiff : 15;
    ushort caseFoldSpecial     : 1;
    signed short caseFoldDiff  : 15;
    ushort unicodeVersion      : 8; /* 5 used */
    ushort nfQuickCheck        : 8;
    ushort graphemeBreakClass  : 4; /* 4 used */
    ushort wordBreakClass      : 4; /* 4 used */
    ushort sentenceBreakClass  : 8; /* 4 used */
    ushort lineBreakClass      : 8; /* 6 used */
    ushort script              : 8;
};

Q_CORE_EXPORT const Properties *QT_FASTCALL properties(uint ucs4);
Q_CORE_EXPORT const Properties *QT_FASTCALL properties(ushort ucs2);

#define GET_DECOMPOSITION_INDEX(ucs4) \
       (ucs4 < 0x3400 \
        ? (QUnicodeTables::uc_decomposition_trie[QUnicodeTables::uc_decomposition_trie[ucs4>>4] + (ucs4 & 0xf)]) \
        : (ucs4 < 0x30000 \
        ? QUnicodeTables::uc_decomposition_trie[QUnicodeTables::uc_decomposition_trie[((ucs4 - 0x3400)>>8) + 0x340] + \
        (ucs4 & 0xff)] : 0xffff))

#define GET_LIGATURE_INDEX(ucs4) \
       (ucs4 < 0x3100 \
        ? (QUnicodeTables::uc_ligature_trie[QUnicodeTables::uc_ligature_trie[ucs4>>5] + (ucs4 & 0x1f)]) \
        : (ucs4 < 0x12000 \
        ? QUnicodeTables::uc_ligature_trie[QUnicodeTables::uc_ligature_trie[((ucs4 - 0x3100)>>8) + 0x188] + (ucs4 & 0xff)] \
        : 0xffff))

extern const ushort specialCaseMap[];

extern const unsigned short uc_decomposition_trie[];
extern const unsigned short uc_decomposition_map[];
extern const unsigned short uc_ligature_trie[];
extern const unsigned short uc_ligature_map[];

struct CasefoldTraits
{
    static inline signed short caseDiff(const Properties *prop)
    { return prop->caseFoldDiff; }

    static inline bool caseSpecial(const Properties *prop)
    { return prop->caseFoldSpecial; }
};

struct LowercaseTraits
{
   static inline signed short caseDiff(const Properties *prop) {
      return prop->lowerCaseDiff;
   }

   static inline bool caseSpecial(const Properties *prop) {
      return prop->lowerCaseSpecial;
   }
};

struct TitlecaseTraits
{
    static inline signed short caseDiff(const Properties *prop) {
      return prop->titleCaseDiff;
    }

    static inline bool caseSpecial(const Properties *prop) {
      return prop->titleCaseSpecial;
    }
};

struct UppercaseTraits
{
   static inline signed short caseDiff(const Properties *prop) {
      return prop->upperCaseDiff;
   }

   static inline bool caseSpecial(const Properties *prop) {
      return prop->upperCaseSpecial;
   }
};

enum GraphemeBreakClass {
    GraphemeBreak_Other,
    GraphemeBreak_CR,
    GraphemeBreak_LF,
    GraphemeBreak_Control,
    GraphemeBreak_Extend,
    GraphemeBreak_RegionalIndicator,
    GraphemeBreak_Prepend,
    GraphemeBreak_SpacingMark,
    GraphemeBreak_L,
    GraphemeBreak_V,
    GraphemeBreak_T,
    GraphemeBreak_LV,
    GraphemeBreak_LVT
};

enum WordBreakClass {
    WordBreak_Other,
    WordBreak_CR,
    WordBreak_LF,
    WordBreak_Newline,
    WordBreak_Extend,
    WordBreak_RegionalIndicator,
    WordBreak_Katakana,
    WordBreak_HebrewLetter,
    WordBreak_ALetter,
    WordBreak_SingleQuote,
    WordBreak_DoubleQuote,
    WordBreak_MidNumLet,
    WordBreak_MidLetter,
    WordBreak_MidNum,
    WordBreak_Numeric,
    WordBreak_ExtendNumLet
};

enum SentenceBreakClass {
    SentenceBreak_Other,
    SentenceBreak_CR,
    SentenceBreak_LF,
    SentenceBreak_Sep,
    SentenceBreak_Extend,
    SentenceBreak_Sp,
    SentenceBreak_Lower,
    SentenceBreak_Upper,
    SentenceBreak_OLetter,
    SentenceBreak_Numeric,
    SentenceBreak_ATerm,
    SentenceBreak_SContinue,
    SentenceBreak_STerm,
    SentenceBreak_Close
};


// see http://www.unicode.org/reports/tr14/tr14-30.html
// we do not use the XX and AI classes and map them to AL instead.
enum LineBreakClass {
    LineBreak_OP, LineBreak_CL, LineBreak_CP, LineBreak_QU, LineBreak_GL,
    LineBreak_NS, LineBreak_EX, LineBreak_SY, LineBreak_IS, LineBreak_PR,
    LineBreak_PO, LineBreak_NU, LineBreak_AL, LineBreak_HL, LineBreak_ID,
    LineBreak_IN, LineBreak_HY, LineBreak_BA, LineBreak_BB, LineBreak_B2,
    LineBreak_ZW, LineBreak_CM, LineBreak_WJ, LineBreak_H2, LineBreak_H3,
    LineBreak_JL, LineBreak_JV, LineBreak_JT, LineBreak_RI, LineBreak_CB,
    LineBreak_SA, LineBreak_SG, LineBreak_SP, LineBreak_CR, LineBreak_LF,
    LineBreak_BK
};

Q_CORE_EXPORT QUnicodeTables::GraphemeBreakClass QT_FASTCALL graphemeBreakClass(uint ucs4);
Q_CORE_EXPORT QUnicodeTables::WordBreakClass     QT_FASTCALL wordBreakClass(uint ucs4);
Q_CORE_EXPORT QUnicodeTables::SentenceBreakClass QT_FASTCALL sentenceBreakClass(uint ucs4);
Q_CORE_EXPORT QUnicodeTables::LineBreakClass     QT_FASTCALL lineBreakClass(uint ucs4);

inline GraphemeBreakClass graphemeBreakClass(QChar ch)
{
   return graphemeBreakClass(ch.unicode());
}

inline WordBreakClass wordBreakClass(QChar ch)
{
   return wordBreakClass(ch.unicode());
}

inline SentenceBreakClass sentenceBreakClass(QChar ch)
{
   return sentenceBreakClass(ch.unicode());
}

inline LineBreakClass lineBreakClass(QChar ch)
{
   return lineBreakClass(ch.unicode());
}

}

// constants for Hangul (de)composition, see UAX #15
enum {
    Hangul_SBase = 0xac00,
    Hangul_LBase = 0x1100,
    Hangul_VBase = 0x1161,
    Hangul_TBase = 0x11a7,
    Hangul_LCount = 19,
    Hangul_VCount = 21,
    Hangul_TCount = 28,
    Hangul_NCount = Hangul_VCount * Hangul_TCount,
    Hangul_SCount = Hangul_LCount * Hangul_NCount
};

#endif
